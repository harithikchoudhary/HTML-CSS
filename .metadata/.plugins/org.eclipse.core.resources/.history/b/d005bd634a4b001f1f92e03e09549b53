package com.iiht.security.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@EnableMethodSecurity
@Configuration
public class EmpSecurityConfig extends WebSecurityConfiguration {

	@Bean
	public static PasswordEncoder passwordEncoder() {

		return new BCryptPasswordEncoder();
	}
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

		http.csrf(csrf -> csrf.disable()).authorizeHttpRequests((authorize) -> authorize.anyRequest().authenticated())
				.httpBasic(Customizer.withDefaults());
		return http.build();
	}

	InMemoryUserDetailsManager userDetailsService() {

		UserDetails userDetails = User.builder().username("bean").password(passwordEncoder().encode("mister"))
				.roles("USER").build();
		UserDetails adminDetails = User.builder().username("bond").password(passwordEncoder().encode("james"))
				.roles("ADMIN").build();

		return new InMemoryUserDetailsManager(userDetails, adminDetails);
	}

}


















/*
 * protected void configure (AuthenticationManagerBuilder auth) throws
 * Exception{
 * 
 * auth.inMemoryAuthentication() .withUser("bond") .password("james")
 * .roles("USER") .and() .withUser("poo") .password("bear") .roles("ADMIN");
 * 
 * }
 * 
 * 
 * @Bean
 * 
 * @SuppressWarnings("depreciaition") public PasswordEncoder
 * getPasswordEncoder() { return NoOpPasswordEncoder.getInstance();
 * 
 * }
 * 
 * protected void configure (HttpSecurity http) throws Exception{
 * http.authorizeRequests() .andMatchers("/admin").hasRole("ADMIN")
 * .andMatchers("/user").hasAnyRole("USER") .anyMatchers("/").permitAll .and()
 * .formLogin();
 * 
 * }
 */
